#!/bin/sh
#(c) Copyright Barry Kauler 2006,2007 www.puppylinux.com
#2007 Lesser GPL licence v2 (/usr/share/doc/legal/lgpl-2.1.txt)
# Contributors: Dougal, rerwin, pizzasgood, TazOC, Karl Godt
#               Jemimah, 01micko, mavrothal, rodin.s, zigbert, shinobar

#   https://www.x.org/wiki/Releases/
#-- Xorg X Server version should be 1.11+ --
#-- X11R7.6 (Released: 2010-12-20) should be the minimum version supported

script=${0##*/}

[ ! $DISPLAY ] && CLI=1
case $script in
	xorgwizard-cli) CLI=1 ;;
	xorgwizard-automatic) AUTOMATIC=1 ;;
esac

ARCH=`uname -m`

. /etc/rc.d/PUPSTATE

#============================================================

function xorg_vesa() {
	[ -f /tmp/xorgvesa.state ] && read -r state < /tmp/xorgvesa.state
	[ $1 ] && state="$1"
	case $state in
		on|1|yes|true) RSTR='	Driver      "vesa" #card0driver' ;;
		off|0|no|false) RSTR='#	Driver      "vesa" #card0driver' ;;
		*) return 1 ;;
	esac
	if [ -f /etc/X11/xorg.conf ] ; then
		sed -i "s|.*#card0driver.*|${RSTR}|" /etc/X11/xorg.conf
		rm -f /tmp/xorgvesa.state
	else
		echo -n "$state" > /tmp/xorgvesa.state
	fi
}

function xorg_color_depth() {
	[ -f /tmp/xorg.depth ] && read -r XCD < /tmp/xorg.depth
	[ $1 ] && XCD="$1"
	case $XCD in
		16|24) ok=1 ;;
		remove) remove=1 ;;
		*) return 1 ;;
	esac
	if [ -f /etc/X11/xorg.conf ] ; then
		RSTR="		Depth       $XCD #screen0depth"
		if [ "$remove" = "1" ] ; then
			XCD=$(grep 'screen0depth' /etc/X11/xorg.conf | grep -o 'Depth.*' | tr -s ' ' | cut -d ' ' -f2)
			RSTR="#		Depth       $XCD #screen0depth"
		fi
		sed -i "s|.*#screen0depth.*|${RSTR}|" /etc/X11/xorg.conf
		rm -f /tmp/xorg.depth
	else
		echo -n "$XCD" > /tmp/xorg.depth
	fi
}

function xorg_res() {
	[ -f /tmp/xorg.res ] && read -r RES < /tmp/xorg.res
	[ $1 ] && RES="$1"
	case $RES in
		*"x"*) ok=1 ;;
		*) return ;;
	esac
	if [ -f /etc/X11/xorg.conf ] ; then
		RSTR="		Modes       \"${RES}\" #screen0modes"
		sed -i "s|.*#screen0modes.*|${RSTR}|" /etc/X11/xorg.conf
		rm -f /tmp/xorg.res
	else
		echo -n "$RES" > /tmp/xorg.res
	fi
}

RESOLUTIONS="<item>800x600</item>
<item>1024x768</item>
<item>1280x1024</item>
<item>1366x768</item>
<item>1680x1050</item>
<item>1920x1080</item>"

#============================================================
#                  xorgwizard-automatic
#============================================================

if [ "$AUTOMATIC" = "1" ] ; then

. /etc/rc.d/MODULESCONFIG #ADDLIST

case ${ARCH} in arm*|aarch*)
 #running on an arm board...
 cp -f /etc/X11/xorg.conf-auto-armsystem /etc/X11/xorg.conf
 echo "#PuppyHardwareProfile=armsystem" >> /etc/X11/xorg.conf
 #create a copy of xorg.conf with the profile in the filename...
 cp -af /etc/X11/xorg.conf /etc/X11/xorg.conf.armsystem
 echo 
 echo "Xorg Wizard Automatic has just run."
 echo "If you are reading this, then you are at the console without X running."
 echo "The usual thing now is to type 'xwin' to start X..."
 exit ###EXIT###
esac

cp -f /etc/X11/xorg.conf-auto-pc /etc/X11/xorg.conf
xorg_vesa
xorg_color_depth

RETVALS="`keymap-set --xopt`"
eval "$RETVALS" #ex: XKBMODEL="pc102", XKBLAYOUT="us", XKBVARIANT=""
[ "$XKBLAYOUT" = "" ] && XKBLAYOUT='us'
[ "$XKBMODEL" = "" ] && XKBMODEL='pc102'
REGEX4="s%.*#xkeymap0%	Option      \"XkbLayout\" \"${XKBLAYOUT}\" #xkeymap0%"
REGEX5="s%.*#xkbmodel0%	Option      \"XkbModel\" \"${XKBMODEL}\" #xkbmodel0%"
sed -i -e "$REGEX4" -e "$REGEX5" /etc/X11/xorg.conf
if [ "$XKBVARIANT" ];then
 REGEX6="s%.*#xkbvariant0%	Option      \"XkbVariant\" \"${XKBVARIANT}\" #xkbvariant0%"
 sed -i -e "$REGEX6" /etc/X11/xorg.conf
fi

TOUCHPAD=''
OLD3='Section "Monitor"'
[ "`grep 'Elantech' /proc/bus/input/devices`" ] && TOUCHPAD='Elantech'
[ "`grep 'Alps' /proc/bus/input/devices`" ] && TOUCHPAD='Alps'
[ "`grep 'Synaptics' /proc/bus/input/devices`" ] && TOUCHPAD='Synaptics'
if [ "$TOUCHPAD" ];then
 if [ "`lsmod | grep '^evdev'`" = "" ];then
  REGEXt0="s%^ADDLIST=.*%ADDLIST='${ADDLIST} evdev '%"
  sed -i -e "$REGEXt0" /etc/rc.d/MODULESCONFIG #so evdev module will load next bootup.
  modprobe evdev
 fi
 #110913 create basic section...
 REGEXt1='s%.*#loadsynaptics%	Load "synaptics" #loadsynaptics%'
 REGEXt2='s%.*#serverlayoutsynaptics%	InputDevice "Synaptics Mouse" "AlwaysCore" #serverlayoutsynaptics%'
 NEW3='Section "InputDevice"\
	Identifier "Synaptics Mouse"\
	Driver "synaptics"\
	Option "SHMConfig" "on"\
EndSection\
\
Section "Monitor"'
 REGEXt3="s%${OLD3}%${NEW3}%"
 sed -i -e "$REGEXt1" -e "$REGEXt2" -e "$REGEXt3" /etc/X11/xorg.conf
fi

echo 
echo "Xorg Wizard Automatic has just run."
echo "If you are reading this, then you are at the console without X running."
echo "The usual thing now is to type 'xwin' to start X..."
exit

fi

#END OF xorgwizard-automatic
#===========================


#============================================================
#                      xorgwizard-cli
#============================================================

if [ "$CLI" = "1" ] ; then

export TEXTDOMAIN=xorgwizard-cli
export OUTPUT_CHARSET=UTF-8
. gettext.sh

VESA_MSG="$(gettext 'Use Xorg Vesa driver')"
if [ -f /etc/X11/xorg.conf ] ; then
	USING_XORG_VESA="$(cat /etc/X11/xorg.conf | grep '#card0driver' | grep -v '#.*Driver')"
elif [ -f /tmp/xorgvesa.state ] ; then
	read -r xstate < /tmp/xorgvesa.state
	case $xstate in on|1|yes|true) USING_XORG_VESA=yes ;; esac
fi
[ "$USING_XORG_VESA" ] && VESA_MSG="$(gettext "Don't hard code Xorg Vesa in xorg.conf")"

dialog --title "$(gettext 'Xorg Wizard')" \
	--cancel-label "$(gettext 'Cancel')" --ok-label "$(gettext 'OK')" \
	--menu "$(gettext 'Action to take.

If you are having problems with Xorg then you may want to use the Xorg Vesa driver.')" 0 0 0 \
	"1)" "$(gettext 'Do not configure anything (just continue)')" \
	"2)" "$VESA_MSG"  >/dev/tty 2>/tmp/xorgcli.res
#"3)" "$(gettext 'Probe hardware and offer alternatives...')"
[ $? -eq 0 ] || exit
read -r XCHOICE < /tmp/xorgcli.res
rm -f /tmp/xorgcli.res

case $XCHOICE in
	"1)") exit ;;
	"2)")
		if [ "$USING_XORG_VESA" ] ; then
			xorg_vesa off
		else
			xorg_vesa on
		fi
		dialog --title "$(gettext 'Xorg Wizard')" \
			--cancel-label "$(gettext 'Skip')" --ok-label "$(gettext 'Select')" \
			--menu "$(gettext 'Color bit depth.

You might want to skip this step. Choose "16 bit" if you are having problems and your video hardware is very old... or if you already know that your hardware works better with a 16 color bit depth')." 0 0 0 \
			"1)" "24 bit" \
			"2)" "16 bit (ancient video hardware)"  \
			"3)" "remove setting from xorg.conf (if in use)" >/dev/tty 2>/tmp/xorgcli.res
		if [ $? -eq 0 ] ; then
			read -r ZCHOICE < /tmp/xorgcli.res
			case $ZCHOICE in
				"1)") DEPTH="24" ;;
				"2)") DEPTH="16" ;;
				"3)") DEPTH="remove" ;;
			esac
			xorg_color_depth $DEPTH
		fi
		rm -f /tmp/xorgcli.res
		exit
		;;
	*) exit
esac

#reenter this script...
#exec xorgwizard-cli

fi

#END OF xorgwizard-cli
#=====================


#============================================================
#                        xorgwizard
#============================================================

[ "`whoami`" != "root" ] && exec sudo -A ${0} ${@} #110505

export TEXTDOMAIN=xorgwizard
export OUTPUT_CHARSET=UTF-8

. /etc/DISTRO_SPECS #120723
. /etc/rc.d/BOOTCONSTRAINED #120723

[ "`readlink /usr/bin/X`" = "" ] && ln -snf Xorg /usr/bin/X

if which nvidia-settings &>/dev/null && NRATE=$(nvidia-settings -q RefreshRate | grep '[0-9]') ; then
	NVIDIABUTTON='<button space-expand="false" space-fill="false" tooltip-text="'$(gettext 'Launch the NVIDIA X Server Settings.')'">
  '"`/usr/lib/gtkdialog/xml_button-icon /usr/local/video_upgrade/nvidia48x32.png`"'
  <label>'$(gettext "nvidia-settings")'</label>
  <action>nvidia-settings &</action>
 </button>'
fi

UPGRADEBUTTON='<button space-expand="false" space-fill="false" tooltip-text="'$(gettext 'Launch the Video Upgrade Wizard')'">
  '"`/usr/lib/gtkdialog/xml_button-icon graphics_3D.svg`"'
  <label>'$(gettext "Video Upgrade...")'</label>
  <action>video_upgrade_wizard &</action>
 </button>'

MAIN1='
<window title="'$(gettext 'Xorg Video Wizard')'" image-name="/usr/share/pixmaps/puppy/graphics_xorg.svg">
<vbox space-expand="true" space-fill="true">
  <notebook labels="'$(gettext 'Screen')'|'$(gettext 'Advanced')'" space-expand="true" space-fill="true">
    <vbox space-expand="true" space-fill="true">
      <frame '$(gettext 'Screen tuning')'>
      '"`/usr/lib/gtkdialog/xml_info fixed graphics.svg 60 "$(gettext '<b>Screen tuning</b> depends on the loaded video/graphics driver, so if correct resolution is not there, check the advanced tab...')"`"'

        <hbox border-width="7" space-expand="true" space-fill="true">
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext '<b>Change screen resolution (xorg.conf)</b>
Set screen resolution and store it in xorg.conf.. guarantees a proper X startup')'"</label></text>
          <vbox space-expand="false" space-fill="false">
            <button>
              '"`/usr/lib/gtkdialog/xml_button-icon screen_resolution.svg big`"'
              <action>EXIT:19</action>
            </button>
          </vbox>
        </hbox>
        <hseparator></hseparator>

        <hbox border-width="7" space-expand="true" space-fill="true">
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext '<b>Change screen resolution (xrandr)</b>
How many vertical and horizontal pixels fits your screen.')'"</label></text>
          <vbox space-expand="false" space-fill="false">
            <button>
              '"`/usr/lib/gtkdialog/xml_button-icon screen_resolution.svg big`"'
              <action>EXIT:18</action>
            </button>
          </vbox>
        </hbox>
        <hseparator></hseparator>

        <hbox border-width="7" space-expand="true" space-fill="true">
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext '<b>Monitor gamma calibration</b>
This will adjust the monitor colors including screen brightness.')'"</label></text>
            <vbox space-expand="false" space-fill="false">
              <button>
                '"`/usr/lib/gtkdialog/xml_button-icon screen_calibration.svg big`"'
                <action>EXIT:17</action>
              </button>
           </vbox>
         </hbox>

       </frame>
    </vbox>
    <vbox space-expand="true" space-fill="true">
   
      <frame '$(gettext 'Manage xorg.conf')'>
        '"`/usr/lib/gtkdialog/xml_info fixed graphics.svg 60 "$(gettext 'The behaviour of Xorg is controlled by a configuration file, /etc/X11/xorg.conf. This was generated auto-matically at the first boot, but you may now edit it manually.')"`"'
        <hbox border-width="7" space-expand="true" space-fill="true">
          <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext 'You can <b>manually edit</b> /etc/X11/xorg.conf, but note that you will need to exit from X afterward then restart X (see Shutdown menu). Click button to edit:

You can run xorgwizard manually by exiting from X to the commandline (see Shutdown menu) then type xorgwizard.')'"</label></text>
          <vbox space-expand="false" space-fill="false">
            <button>
              '"`/usr/lib/gtkdialog/xml_button-icon edit.svg big`"'
              <action>EXIT:15</action>
            </button>
          </vbox>
        </hbox>
        <hseparator></hseparator>

         <hbox border-width="7" space-expand="true" space-fill="true">
           <text xalign="0" use-markup="true" space-expand="true" space-fill="true"><label>"'$(gettext '<b>X/Y correction</b>
If the screen is displaced or the width/height are wrong. This will modify the existing xorg.conf file. <b>Use with caution!</b>')'"</label></text>
           <vbox space-expand="false" space-fill="false">
             <button>
               '"`/usr/lib/gtkdialog/xml_button-icon screen_xy.svg big`"'
               <action>EXIT:13</action>
             </button>
           </vbox>
         </hbox>

      </frame>
  
    </vbox>
  </notebook>
  <hbox height-request="1"><text space-expand="true" space-fill="true"><label>" "</label></text></hbox>
  <hbox space-expand="false" space-fill="true">
    '${NVIDIABUTTON}'
    '${UPGRADEBUTTON}'
    <text space-expand="true" space-fill="false"><label>" "</label></text>
    <button space-expand="false" space-fill="false">
      <label>'$(gettext "Quit")'</label>
      '"`/usr/lib/gtkdialog/xml_button-icon quit`"'
      <action>EXIT:quit</action>
    </button>
  </hbox>
</vbox>
</window>'


#do this code block if X is running...
if [ "`busybox ps | grep "\\.xinitrc"`" != "" ];then
 . /usr/lib/gtkdialog/xml_info gtk #build bg_pixmap for gtk-theme
 RETSTR="`echo "$MAIN1" | gtkdialog --center --stdin`"
 RETVAL="`echo "$RETSTR" | grep '^EXIT=' | cut -f 2 -d '"'`" #'geany

 case $RETVAL in
  13) #xvidtune
   /usr/lib/gtkdialog/box_ok "$(gettext 'Xvidtune IMPORTANT HELP')" info "$(gettext "If you click the <b>Show</b> button, the adjusted settings will be what you want permanently. After hitting the <b>Quit</b> button, you will be given one last chance not to make the change permanent.")" "$(gettext 'Thus:')" "$(gettext "<b>Show</b> to record the settings (for later inclusion into xorg.conf)")" "$(gettext "<b>Quit</b> to exit Xvidtune.")" " " "$(gettext 'Please note that Xvidtune does not work with all video hardware, meaning that changing the settings will cause no change on the screen.')" &
   XMSGPID=$!
   MODELINE0="`xvidtune | grep '^"[0-9]'`" #'geanyfix.
   pupkill $XMSGPID
   if [ ! "$MODELINE0" = "" ];then
    xmessage -bg orange -title "$(gettext 'Xvidtune: Modeline')" -buttons Write:10,Quit:11 "$(gettext 'The new modeline is:')
$MODELINE0

$(gettext 'Note, you will have to restart X for it to take effect. If it messes')
`gettext \"up X, edit from commandline 'mp /etc/X11/xorg.conf' and comment-out\"`
`gettext \"the 'UseModes' line (do not delete it) in the Monitor section.\"`

`gettext \"To insert this into /etc/X11/xorg.conf, click 'Write' button...\"`
`gettext \"To exit without changing xorg.conf, click 'Quit' button...\"`"
    if [ $? -eq 10 ];then
     PATTERNA="s/.*#modes0modeline0/ ModeLine $MODELINE0 #modes0modeline0/g"
     cat /etc/X11/xorg.conf | sed -e "$PATTERNA" > /tmp/xorg.conf.new
     sync
     cat /tmp/xorg.conf.new | sed -e 's/#.*UseModes/UseModes/g' > /etc/X11/xorg.conf
     sync
    fi
   fi
   exit
   ;;
  15) exec defaulttexteditor /etc/X11/xorg.conf ;; #edit xorg.conf
  17) exec xgamma-gui  ;;#xgamma-gui
  18) exec xrandrshell ;;#resolution changer
  19) #resolution changer

	xorg_conf=/etc/X11/xorg.conf
	if [ -f "$xorg_conf" ] ; then
		DEFAULT_RES=$(grep 'screen0modes' ${xorg_conf} | grep -v '#.*Modes.*' | cut -d '"' -f2)
		if [ "$DEFAULT_RES" = "" ] ; then
			DEFAULT_RES=$(report-video res)
		fi
	else
		DEFAULT_RES=$(report-video res)
	fi
	RESOLUTIONS="<item>$DEFAULT_RES</item>
$(echo "$RESOLUTIONS" | grep -v ">${DEFAULT_RES}<")"
	TITLE=$(gettext 'Set screen resolution [xorg.conf]')
	MSG1=$(gettext 'These are generic screen resolutions that will most likely work, be careful. If in doubt, choose 1024x768 or 1366x768. The settings will be stored in xorg.conf. After this you must restart X..')
	export RES_WINDOW='<window title="'${TITLE}'" icon-name="gtk-preferences" window-position="1">
<vbox>
'$(/usr/lib/gtkdialog/xml_info fixed graphics.svg 48 "$MSG1")'
  <text space-fill="true"><label>'$(gettext "Choose a reasonable resolution for your hardware. If it's very old, it may not support 1920x1080")'</label></text>
  <frame Screen Resolution (xorg.conf)>
  <vbox space-expand="false" space-fill="false">
    <hbox>
      <combobox>
        '${RESOLUTIONS}'
        <variable>CHOSEN_RES</variable>
        <visible>enabled</visible>
       </combobox>
     </hbox>
   </vbox>
   </frame>

	<hbox>
		<button>
			'$(/usr/lib/gtkdialog/xml_button-icon ok)'
			<label>'$(gettext 'OK')'</label>
			<action type="exit">OK</action>
		</button>
		<button>
			'$(/usr/lib/gtkdialog/xml_button-icon cancel)'
			<label>'$(gettext 'Cancel')'</label>
			<action type="exit">Cancel</action>
		</button>
	</hbox>
 </vbox>
</window>'

	. /usr/lib/gtkdialog/xml_info gtk
	I=$IFS; IFS=""
	for STATEMENTS in  $(gtkdialog --center --program RES_WINDOW); do
		eval $STATEMENTS
	done
	IFS=$I

	[ "$EXIT" != "OK" ] && exit
	[ "$CHOSEN_RES" = "" ] && exit
	[ "$CHOSEN_RES" = "$DEFAULT_RES" ] && exit

	xorg_res ${CHOSEN_RES}

	STOCK_ICON="gtk-dialog-info"
	export XDIALOG='
<window title="'${TITLE}'" icon-name="'${STOCK_ICON}'" window-position="1">
	<vbox>
		<pixmap icon_size="6"><input file stock="'${STOCK_ICON}'"></input></pixmap>
		<hbox>
		<text><label>"'$(gettext 'For the changes to effect you must restart X... Would you like to restart X now?')'"</label></text>
		</hbox>
		<hbox>
			<button>
				'$(/usr/lib/gtkdialog/xml_button-icon yes)'
				<label>'$(gettext 'Yes')'</label>
				<action type="exit">Yes</action>
			</button>
			<button>
				'$(/usr/lib/gtkdialog/xml_button-icon no)'
				<label>'$(gettext 'No')'</label>
				<action type="exit">No</action>
			</button>
		</hbox>
	</vbox>
</window>
'
	I=$IFS; IFS=""
	for STATEMENTS in  $(gtkdialog --center --program XDIALOG); do eval $STATEMENTS ; done
	IFS=$I
	if [ "$EXIT" = "Yes" ] ; then
		restartwm
	fi
	;;
 esac
 exit
fi

### END ###
