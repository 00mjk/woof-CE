#!/bin/sh
#
# This application is designed to be run from the launch script, pupsave-hot-backup.
# Runtime errors may occur if this script is executed directly (multiple instances).
#

clean_up() {
	rm -rf /tmp/Pupsave-hot-backup
}
trap clean_up SIGHUP SIGINT SIGTERM

# Verify frugal type installation.
. /etc/rc.d/PUPSTATE
case $PUPMODE in
	12|13)
		echo "$PUPSAVE" | grep -Eq '\.ext[2-4]|\.[2-4]fs' || ERRORMSG="Sorry, not using an ext2-4 save file..."
		;;
	*)
		ERRORMSG="Hot Backup can only be used if there is an active save file..."
		;;
esac

if [ "$ERRORMSG" ] ; then
	clean_up
	echo "$ERRORMSG"
	[ $DISPLAY ] && /usr/lib/gtkdialog/box_ok "${0##*/}" error "$ERRORMSG"
	exit 1
fi

#==========================================================================

# Trigger refresh of dialog
function PHB_psbtimer() {
    # 100% value bypass (for progressbar)
    # Input must be str+int or int+str sequence
    A=`pidof phb_core`
    while [[ "$A" -gt 0 ]] ; do
       echo -e "\n 0"; sleep 0.6
       echo -e "\n 100"; sleep 0.6
       A=`pidof phb_core`
    done
}

function PHB_MBrequired() {     		# $PHB_PUPSAVE_PATH
    lbl="MB required: "
    if [ "${1}" = "$PHB_FTERRR" ]; then
        echo $lbl
        if [ "`cat $PHB_TMPFILE5`" = "0" ]; then echo "" > $PHB_TMPFILE4; fi
        exit
    fi
    if [ "${1}" ]; then
        a="`ls -s --block-size=1m "${1}" | awk '{ print $1 }'`"
        echo "$lbl $a"
    else
        echo "$lbl"
    fi
}

function PHB_MBavailable() {			# $PHB_BKP_PATH $PHB_PUPSAVE_PATH
    lbl="MB available"
    if [ "${1}" = "$PHB_SAVE_TO_ERR" ] || [ "${2}" = "$PHB_FTERRR" ]; then 
        echo $lbl
        # disable backup button
        echo 0 > $PHB_TMPFILE2
        echo 100 > $PHB_TMPFILE3
        exit
    fi
    if [ "${1}" ]; then
        bkp="${1}"
        TEST="`echo $bkp | grep '/mnt/home'`"
        if [ $TEST ] || [ "$bkp" = "/mnt/home" ] || [ ${bkp:0:20} = "/initrd/mnt/dev_save" ]  ; then
            drv="dev_save"
        else
            drv="`expr "$bkp" | awk -F / '{print $3}'`"
        fi
        
        a="`df --block-size=1m | grep "$drv" | awk '{ print $4 }'`"
        if [ "$a" = "" ]; then a=0; fi
        if [ "$drv" = "dev_save" ]; then drv="home"; fi
        b="`ls -s --block-size=1m "${2}" | awk '{ print $1 }'`" # MBrequired
        echo "$lbl on "/mnt/"$drv":" $a"
      
        if [ "`expr $a - $b`" -gt "100" ]; then # enough space
            if [ "`cat $PHB_TMPFILE5`" = "0" ]; then 
                # enable backup button
                echo 100 > $PHB_TMPFILE2
                echo 0 > $PHB_TMPFILE3
                echo "" > $PHB_TMPFILE4
            fi
        else
            if [ "`cat $PHB_TMPFILE5`" = "0" ]; then 
                if [ "$a" -eq "0" ]; then
                    echo "STORAGE DEVICE NOT MOUNTED" > $PHB_TMPFILE4
                    else
                    echo "NOT ENOUGH FREE DISK SPACE" > $PHB_TMPFILE4
                fi
                echo 0 > $PHB_TMPFILE2
                echo 100 > $PHB_TMPFILE3
            fi
        fi
    else
        echo "$lbl"
        if [ "`cat $PHB_TMPFILE5`" = "0" ]; then echo "" > $PHB_TMPFILE4; fi
    fi
}

function PHB_Bkpfilename() { # $PHB_PUPSAVE_PATH
    lbl="Backup file name: "
    if [ "${1}" = "$PHB_FTERRR" ] ; then
        echo $lbl
    elif [ "${1}" ]; then
        a="${1##*/}".BKP-`date +%y.%m.%d-%H.%M` #${1##*/} = basename $1
        echo "$lbl $a"
    else
        echo "$lbl"
    fi
}

function PHB_validate_fs() {			# $PHB_PUPSAVE_PATH
	#echo "fs: $1" 1>&2
	case "$1" in
		"") echo $PHB_SFDEFAULT ;;
		*.[2-4]fs|*.[2-4]fs) echo $PHB_PUPSAVE_PATH ;;
		*) echo $PHB_FTERRR ;;
	esac
}
    
function PHB_validate_bkp_location() {	# $PHB_BKP_PATH
    if [ "${1}" != "" ]; then 
        #IFS="/" read -r direntry level2 level3 level4 <<< "${1}"
        direntry="`expr "${1}" | tr "//" ' ' | awk '{ print $1 }'`" 
        level2="`expr "${1}" | tr "//" ' ' | awk '{ print $2 }'`"
        level3="`expr "${1}" | tr "//" ' ' | awk '{ print $3 }'`"
        #echo $direntry $level2 $level3 $level4 1>&2
        if [ "$direntry" = "mnt" ] && [ "$level2" != "" ] ; then
            echo "${1}"
            echo
        elif [ "$direntry"/"$level2" = "initrd/mnt" ] && [ "$level3" != "" ] ; then
            echo "${1}"
        else
            echo $PHB_SAVE_TO_ERR
            if [ "`cat $PHB_TMPFILE5`" = "0" ]; then echo "" > $PHB_TMPFILE4; fi
        fi
    else
        echo $PHB_LOCDEFAULT
    fi
}

function PHB_Backup() {     			#$PHB_PUPSAVE_PATH $PHB_BKP_PATH
    destdir="${2}"/"`expr "${1}" | awk -F / '{print $NF}'`".BKP-`date +%y.%m.%d-%H.%M`

    if [ -f "$destdir" ]; then
		echo 100 > $PHB_TMPFILE
		/usr/lib/gtkdialog/box_ok "${0##*/}" error "This Pupsave file already exists.  Wait one minute and the file name will change."
		exit 1
    fi
    
    echo 1 > $PHB_TMPFILE5
    echo 0 > $PHB_TMPFILE2
    echo 100 > $PHB_TMPFILE3

    mv /root/.XLOADED /etc/xloadedx
    echo "Copying file -- please wait awhile" > $PHB_TMPFILE4
    cp -f -v "${1}" "$destdir" 2> /dev/null
    mv /etc/xloadedx /root/.XLOADED
    sync

    echo "Running e2fsck on backup -- please wait" > $PHB_TMPFILE4
    e2fsck -y "$destdir" 2> /dev/null

    echo 100 > $PHB_TMPFILE
    echo "" > $PHB_TMPFILE4
    echo 0 > $PHB_TMPFILE5
    sync
    /usr/lib/gtkdialog/box_ok "Pupsave Hot Backup" complete "Save File Backup Completed"
}

help_box() {
	# Markup reference ---- http://www.pygtk.org/docs/pygtk/pango-markup-language.html
	echo "
<b>Pupsave Hot Backup</b> for frugal Puppy installations makes a backup copy of the live pupsave file.

<b>1)</b> For best results, shut down all applications and servers before backing up.

<b>2)</b> The date and time is automatically appended to the backup file name.

<b>3)</b> PHB backs up your system configuration as it exists in the savefile. <span foreground='"'red'"'>It will not backup data stored outside the savefile.</span>

<b>4)</b> To restore a backup, rename the file by removing the 
<b>.</b>BKP-xx.xx.xx-xx.xx file extension.

You must be running a frugal install with a savefile. PHB will not run if you are running only in ram (puppy pfix=ram) or for any other type of Puppy install.

You can also backup other *.2fs, *.3fs or *.4fs files." > /tmp/box_help
	/usr/lib/gtkdialog/box_help
}
export -f help_box

# Some escapement is necessary when this sed is used to allow comments in gui.
PHB_PUPSAVE_HOT_BKP=$(cat <<EOV | sed -e 's/#.*//'    # allow comments in gui
<window title="Pupsave Hot Backup for Frugal Pups" icon-name="gtk-convert" default_width="400">
   <vbox>
      <frame>
         #Pupsave input section
         <text editable="false" use-markup="true" xalign="0.001">
            <label>"<span color='blue'>Pupsave file to backup</span>"</label>
         </text>
         <hbox>
            <entry editable="false">
               <variable>PHB_PUPSAVE_PATH</variable>
               <input>PHB_validate_fs "\$PHB_PUPSAVE_PATH"</input>
            </entry>
            <button>
               <input file stock="gtk-file"></input>
               <action type="fileselect">PHB_PUPSAVE_PATH</action>
            </button>
         </hbox>
         #Backup location section
         <text editable="false" use-markup="true" xalign="0.001">
            <label>"<span color='blue'>Save backup to /mnt/??</span>"</label>
         </text>
         <hbox>
            <entry editable="false" accept="directory">
               <variable>PHB_BKP_PATH</variable>
               <input>PHB_validate_bkp_location "\$PHB_BKP_PATH"</input>
            </entry>
            <button>
               <input file stock="gtk-open"></input>
               <action type="fileselect">PHB_BKP_PATH</action>
            </button>
         </hbox>
      </frame>
      #Information panel section
      <frame>
         <text editable="false" use-markup="true" xalign="0.001">
            <label>"<span color='blue'>Information</span>"</label>
         </text>
         #Disk MB required
         <text height-request="20" xalign="0.001">
            <variable>TEXT1</variable>
            <input>PHB_MBrequired "\$PHB_PUPSAVE_PATH"</input>
         </text>
         #Disk MB available
         <text height-request="20" xalign="0.001">
            <variable>TEXT2</variable>
            <input>PHB_MBavailable "\$PHB_BKP_PATH" "\$PHB_PUPSAVE_PATH"</input>
         </text>
         #Backup file name
         <text height-request="40" wrap="false" xalign="0.001">
            <variable>BKPFILE</variable>
            <input>PHB_Bkpfilename "\$PHB_PUPSAVE_PATH"</input>
         </text>
         <text height-request="40" wrap="false">
            <variable>PROG_PNL</variable>
            <input>P=\`cat "\$PHB_TMPFILE4"\`; echo \$P</input>
         </text>
      </frame>
      #Command buttons
      <hbox>
         <button help><action>help_box &</action></button>
         <button>
            <variable>BTNBKP</variable>
            <input file icon="gtk-save"></input>
            <label>Backup</label>
            <action>disable:BTNQUIT</action>
            <action>PHB_Backup "\$PHB_PUPSAVE_PATH" "\$PHB_BKP_PATH" &</action>
         </button>
         <button use-stock="true" label="gtk-quit" has-focus="true">
            <variable>BTNQUIT</variable>
            <action>EXIT:Exit</action>
         </button>
      </hbox>
      #Event handlers (semi-hidden progress bars)
      <hbox>
         <progressbar height-request="1" width-request="1">
            <input>PHB_psbtimer</input>
            <action>refresh:PHB_BKP_PATH</action>
            <action>refresh:PHB_PUPSAVE_PATH</action>
            <action>refresh:TEXT1</action>
            <action>refresh:TEXT2</action>
            <action>refresh:BKPFILE</action>
            <action>refresh:PROG_PNL</action>
         </progressbar>
         <progressbar height-request="1" width-request="1">      
            <input>PRG=\`pidof phb_core\`; while [[ "\$PRG" -ne 0 ]] ; do sleep 1; PRG=\`pidof phb_core\`; if [ -f "\$PHB_TMPFILE" ];then P=\`cat "\$PHB_TMPFILE"\`; echo "\$P"; fi; done</input>
            <action>enable:BTNQUIT</action>
            <action>echo 0 > "\$PHB_TMPFILE"</action>
         </progressbar>
         <progressbar height-request="1" width-request="1">
            <input>PRH=\`pidof phb_core\`; while [[ "\$PRH" -ne 0 ]] ; do sleep 1; PRH=\`pidof phb_core\`;  if [ -f "\$PHB_TMPFILE2" ];then P=\`cat "\$PHB_TMPFILE2"\`; echo "\$P"; fi; done</input>
            <action>enable:BTNBKP</action>
         </progressbar>
         <progressbar height-request="1" width-request="1">
            <input>PRI=\`pidof phb_core\`; while [[ "\$PRI" -ne 0 ]] ; do sleep 1; PRI=\`pidof phb_core\`;  if [ -f "\$PHB_TMPFILE3" ];then P=\`cat "\$PHB_TMPFILE3"\`; echo "\$P"; fi; done</input>
            <action>disable:BTNBKP</action>
         </progressbar>
      </hbox>
   </vbox>
   <action signal="hide">closewindow:HOT_BKP_HELP</action>
   <action signal="hide">exit:Exit</action>
</window>
EOV
)

##################################################### Execution #################################################

#Find and verify path of currently mounted save file.
SF="`echo $PUPSAVE | cut -f 3 -d ","`" # /savefilename or /xxx/savefilename
if [ -f "/mnt/home${SF}" ]; then
	PHB_SFDEFAULT="/mnt/home${SF}"
else
	PHB_SFDEFAULT=""
fi

# Export variables
export PHB_SFDEFAULT
export PHB_LOCDEFAULT="/mnt/home/${PSUBDIR}"
export PHB_SAVE_TO_ERR="ERROR. Can not save the savefile to itself."
export PHB_FTERRR="ERROR. Chosen file is not a valid pupsave file."

export PHB_TMPFILE="/tmp/Pupsave-hot-backup/tmp1"  # Progressbar value ( enable:BTNQUIT trigger )
export PHB_TMPFILE2="/tmp/Pupsave-hot-backup/tmp2" # Progressbar value ( enable:BTNBKP trigger )
export PHB_TMPFILE3="/tmp/Pupsave-hot-backup/tmp3" # Progressbar value ( disable:BTNBKP trigger )
export PHB_TMPFILE4="/tmp/Pupsave-hot-backup/tmp4" # Contains generated message panel strings
export PHB_TMPFILE5="/tmp/Pupsave-hot-backup/tmp5" # Contains backup-in-progress flag

# Exported functions
export -f PHB_psbtimer PHB_MBrequired PHB_MBavailable PHB_Bkpfilename PHB_Backup PHB_validate_bkp_location PHB_validate_fs

# Application runtime data files
rm -rf /tmp/Pupsave-hot-backup
mkdir /tmp/Pupsave-hot-backup
for i in tmp1 tmp2 tmp3 tmp4 tmp5 pid ; do
	touch /tmp/Pupsave-hot-backup/${i}
done

echo "0" > $PHB_TMPFILE5

# For fileselect dialog default directory
cd /mnt

export PHB_PUPSAVE_HOT_BKP
gtkdialog -p PHB_PUPSAVE_HOT_BKP
clean_up

### END ###
