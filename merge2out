#!/bin/sh
#BK nov. 2011
#111126 do not copy files from woof-distro to woof-out, symlink only.
#111126 fix symlink to compat-distro pkg download directory.
#111127 make sure host linux system has 'printcols' and 'vercmp' utilities.
#111127 also make sure target build will have 'printcols' and 'vercmp'.
#111203 fixes for rerun of this script.
#120503 i left some EMPTYDIRMARKER files inside /dev.
#120512 remove option to create symlinks in working directory.
#120515 build from "gentoo" binary tarballs (refer support/gentoo).
#130528 change owner:group of symlink instead of what it points to.

[ ! -d ./woof-arch ] && exit
[ ! -d ./woof-code ] && exit
[ ! -d ./woof-distro ] && exit

CURDIR="`pwd`"

echo
echo 'This script merges woof-arch, woof-code and woof-distro, to ../woof-out_*.

woof-arch:  architecture-dependent (x86, arm) files, mostly binary executables.
woof-code:  the core of Woof. Mostly scripts.
woof-distro: distro-configuration (Debian, Slackware, etc.) files.
kernel-kit: puppy-kernel build script and configuration files
initrd-progs: script to generate the initial ramdisk

Important: the host architecture is distinct from the target architecture.
The host is the machine you are running Woof on, the target is the machine
in which the Puppy that you build is going to run. Typically, you will build
on a x86 machine, and the target may be x86 or arm.'
echo
# autodetect HOSTARCH - how hard can it be?
preHOSTARCH=`uname -m`
case $preHOSTARCH in
	i?86)HOSTARCH=x86 ;;
	x86_64|amd64)HOSTARCH=x86_64 ;;
	arm*)HOSTARCH=arm ;;
esac
echo --------------------------------------------------------------------------
echo -n "***     We have determined that your host architecture is $HOSTARCH"
echo '    ***'
echo --------------------------------------------------------------------------
echo

echo "Please choose the target target architecture.."
while [ "$TARGETARCH" = "" ] ; do
	echo
	CNT=1
	for ONEARCH in `find woof-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^woof-arch/%%' | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONEARCH"
		CNT=$(($CNT + 1))
	done
	echo -n 'Type number of target architecture: '
	read nTARGETARCH
	TARGETARCH="`find woof-arch -mindepth 1 -maxdepth 1 -type d | sed -e 's%^woof-arch/%%' | sort | head -n $nTARGETARCH 2>/dev/null | tail -n 1`"
done
echo "...ok, $TARGETARCH"
echo

echo 'Woof builds a Puppy based on the binary packages from another distro.
We sometimes refer to this as the "compat-distro".'
while [ "$COMPATDISTRO" = "" ] ; do
	echo
	CNT=1
	taPTN="s%^woof-distro/${TARGETARCH}/%%"
	for ONEDISTRO in `find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONEDISTRO"
		CNT=$(($CNT + 1))
	done
	echo -n 'Type number of compat-distro: '
	read nCOMPATDISTRO
	COMPATDISTRO="`find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type d | sed -e "${taPTN}" | sort | head -n $nCOMPATDISTRO 2>/dev/null | tail -n 1`"
done
echo "...ok, $COMPATDISTRO"
echo

echo 'The compat-distro usually has release versions, unless it is a rolling
release system such as Arch Linux. Please choose which release you want to
obtain the binary packages from.'

while [ "$COMPATVERSION" = "" ] ; do
	echo
	CNT=1
	for ONECOMPAT in `find woof-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | tr '\n' ' '`
	do
		echo "$CNT  $ONECOMPAT"
		CNT=$(($CNT + 1))
	done
	if [ $CNT -eq 1 ];then
		echo
		echo "Sorry, there are no release directories inside woof-distro/${COMPATDISTRO}."
		echo "At least one is required. Quiting."
		exit
	fi
	echo -n 'Type number of release: '
	read nCOMPATVERSION
	COMPATVERSION="`find woof-distro/${TARGETARCH}/${COMPATDISTRO} -maxdepth 1 -mindepth 1 -type d | rev | cut -f 1 -d '/' | rev | sort | head -n $nCOMPATVERSION 2>/dev/null | tail -n 1`"
done
echo "...ok, $COMPATVERSION"
echo

echo 'Choices:'
echo "Host architecture:     $HOSTARCH"
echo "Target architecture:   $TARGETARCH"
echo "Compatible-distro:     $COMPATDISTRO"
echo "Compat-distro version: $COMPATVERSION"
echo
echo -n "If these are ok, press ENTER, other CTRL-C to quit: "
read waitforit

#-------
WOOF_OUT=../woof-out_${HOSTARCH}_${TARGETARCH}_${COMPATDISTRO}_${COMPATVERSION}
#-------

echo
echo "Directory '${WOOF_OUT}'
will now be created, if not already, and the contents of 'woof-code' copied
into it. Then, these will also be copied into it:
woof-arch/${HOSTARCH}/build
woof-arch/${TARGETARCH}/target
woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} (files all levels)"
echo
echo "Any existing files in '${WOOF_OUT}' will be over-ridden."
echo "(Also, if you have any of your own files in folders 'boot', 'kernel-skeleton',
 'packages-templates', 'rootfs-skeleton', 'rootfs-packages', 'support', 'kernel-kit'
 or 'initrd-progs', they will be deleted.)"
echo
echo -n 'Press ENTER to continue: '
read goforit

#111203 as files/dirs could be removed in future woofs, need to wipe entire target dirs first...
for d in boot kernel-skeleton packages-templates rootfs-skeleton rootfs-packages support kernel-kit initrd-progs
do
	rm -rf ${WOOF_OUT}/${d} 2> /dev/null
done
sync

mkdir -p ${WOOF_OUT}
echo "Copying woof-code/*..."
cp -a -f --remove-destination woof-code/* ${WOOF_OUT}/
sync
echo "Copying woof-arch/${HOSTARCH}/build/*..."
cp -a -f --remove-destination woof-arch/${HOSTARCH}/build/* ${WOOF_OUT}/
sync
echo "Copying woof-arch/${TARGETARCH}/target/*"
cp -a -f --remove-destination woof-arch/${TARGETARCH}/target/* ${WOOF_OUT}/
sync
if [ "${COMPATDISTRO}" = "slackware64" -a "${TARGETARCH}" = "x86_64" ];then
	# fix up the templates for 64 bit build
	TEMPLATES="${WOOF_OUT}/packages-templates"
	LIST=`ls ${TEMPLATES}|grep -v pcmciautils`
	echo -n "fixing package templates for 64 bit: "
	sleep 2
	for i in $LIST
	do 
		echo -n "$i "
		if [ -d ${TEMPLATES}/${i}/lib ];then
			mv ${TEMPLATES}/${i}/lib ${TEMPLATES}/${i}/lib64
			echo -n '' > ${TEMPLATES}/${i}/PLUSEXTRADIRS
		fi
		[ -d ${TEMPLATES}/${i}/usr/lib ] \
		&& mv ${TEMPLATES}/${i}/usr/lib ${TEMPLATES}/${i}/usr/lib64
	done
	#fix FIXUPHACK scripts
	find ${TEMPLATES} -type f -name FIXUPHACK -exec sed -i -e 's%lib\/%lib64/%g' -e 's%lib %lib64 %g' '{}' \;
	echo -e "\n\nlib64 directories created in packages-templates."
fi
echo
echo "Copying kernel-kit..."
cp -a -f --remove-destination kernel-kit ${WOOF_OUT}/
sync
echo "Copying initrd-progs..."
cp -a -f --remove-destination initrd-progs ${WOOF_OUT}/
sync

echo
echo "Copying woof-distro/${COMPATDISTRO}/${COMPATVERSION}/*..."
#copy any top-level files, going down...

DESTTYPE='file'
choosesymlink=''

PARENTDIR="`echo -n "$CURDIR" | rev | cut -f 1 -d '/' | rev`" #ex: woof2
for ONETOP in `find woof-distro -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
	if [ "$choosesymlink" = "" ];then
		cp -a -f --remove-destination $ONETOP ${WOOF_OUT}/
	else
		ONENAME="`basename $ONETOP`"
		ln -snf ../${PARENTDIR}/${ONETOP} ${WOOF_OUT}/${ONENAME}
	fi
done

for ONETOP in `find woof-distro/${TARGETARCH} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
	if [ "$choosesymlink" = "" ];then
		cp -f -a --remove-destination $ONETOP ${WOOF_OUT}/
	else
		ONENAME="`basename $ONETOP`"
		ln -snf ../${PARENTDIR}/${ONETOP} ${WOOF_OUT}/${ONENAME}
	fi
done

for ONETOP in `find woof-distro/${TARGETARCH}/${COMPATDISTRO} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
	if [ "$choosesymlink" = "" ];then
		cp -f -a --remove-destination $ONETOP ${WOOF_OUT}/
	else
		ONENAME="`basename $ONETOP`"
		ln -snf ../${PARENTDIR}/${ONETOP} ${WOOF_OUT}/${ONENAME}
	fi
done

#lowest level...
for ONETOP in `find woof-distro/${TARGETARCH}/${COMPATDISTRO}/${COMPATVERSION} -mindepth 1 -maxdepth 1 -type f | tr '\n' ' '`
do
	if [ "$choosesymlink" = "" ];then
		cp -f -a --remove-destination $ONETOP ${WOOF_OUT}/
	else
		ONENAME="`basename $ONETOP`"
		ln -snf ../${PARENTDIR}/${ONETOP} ${WOOF_OUT}/${ONENAME}
	fi
done
sync

echo "WOOF_HOSTARCH='$HOSTARCH'
WOOF_TARGETARCH='${TARGETARCH}'
WOOF_COMPATDISTRO='${COMPATDISTRO}'
WOOF_COMPATVERSION='${COMPATVERSION}'" > ${WOOF_OUT}/WOOFMERGEVARS

#work around limitations of a version control system...
echo
echo "Some things are modified inside 'woof-code' to cater for most Version
Control Systems.. this will now be undone in '../woof-out_*'..."
echo
echo -n "Press ENTER to continue: "
read goforit

echo
cd ${WOOF_OUT}
(
	cd rootfs-skeleton
	[ -f dev.tar.gz ] && tar -zxf dev.tar.gz && rm -f dev.tar.gz
)
find . -type f -name EMPTYDIRMARKER -delete

#2: VCSMETADATA permissions/ownership...
if [ -s VCSMETADATA ];then
	echo "Fixing file/dir permissions/ownership..."
	while read ONESPEC ; do
		IFS=":" read -r ONEFILE ONEPERM ONEOWNER ONEGROUP <<< "$ONESPEC"
		[ ! -e "$ONEFILE" ] && continue
		echo -n '.'
		chmod $ONEPERM $ONEFILE
		#130528 change owner:group of symlink instead of what it points to...
		[ "$ONEOWNER" != "UNKNOWN" ] && chown -h $ONEOWNER $ONEFILE
		[ "$ONEOWNER" = "UNKNOWN" ] && chown -h root $ONEFILE
		[ "$ONEGROUP" != "UNKNOWN" ] && chgrp -h $ONEGROUP $ONEFILE
		[ "$ONEGROUP" = "UNKNOWN" ] && chgrp -h root $ONEFILE
	done < VCSMETADATA
	echo
fi
cd $CURDIR
sync

#common dir to download pet pkgs to...
mkdir -p ../local-repositories/${TARGETARCH}/packages-pet
[ ! -e ${WOOF_OUT}/packages-pet ] && ln -s ../local-repositories/${TARGETARCH}/packages-pet ${WOOF_OUT}/packages-pet #111203 check exist.

#more links to common download...
if [ -f ${WOOF_OUT}/DISTRO_SPECS ];then
	. ${WOOF_OUT}/DISTRO_SPECS
	#111126 code from 2createpackages...
	BINARIES='deb' #get them from packages-deb.
	[ "$DISTRO_BINARY_COMPAT" = "slackware" ] && BINARIES="tgz_txz" #download to packages-tgz_txz-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "slackware64" ] && BINARIES="tgz_txz" #download to packages-tgz_txz-${DISTRO_COMPAT_VERSION}. #140619 add 64
	[ "$DISTRO_BINARY_COMPAT" = "debian" ] && BINARIES="deb" #download to packages-deb-${DISTRO_COMPAT_VERSION}.
	[ "$DISTRO_BINARY_COMPAT" = "gentoo" ] && BINARIES="gentoo" #120515 download to packages-gentoo-gap6
	[ "$DISTRO_BINARY_COMPAT" = "raspbian" ] && BINARIES="deb_raspbian" #download to packages-deb_raspbian-${DISTRO_COMPAT_VERSION}.
	BINARIES="${BINARIES}-${DISTRO_COMPAT_VERSION}"

	mkdir -p ../local-repositories/${TARGETARCH}/packages-${BINARIES}
	[ ! -e ${WOOF_OUT}/packages-${BINARIES} ] && ln -s ../local-repositories/${TARGETARCH}/packages-${BINARIES} ${WOOF_OUT}/packages-${BINARIES} #111203 check exist.
	if [ "$DISTRO_TARGETARCH" = "arm" ]; then
		mkdir -p ../local-repositories/${TARGETARCH}/sd-skeleton-images
		[ ! -e ${WOOF_OUT}/sd-skeleton-images ] && ln -s ../local-repositories/${TARGETARCH}/sd-skeleton-images ${WOOF_OUT}/sd-skeleton-images
	fi
fi

#record target architecture in DISTRO_SPECS (will end up in /etc/ in Puppy build)...
if [ -f ${WOOF_OUT}/DISTRO_SPECS ];then
	if [ "`grep '^DISTRO_TARGETARCH' ${WOOF_OUT}/DISTRO_SPECS`" = "" ];then
		echo "DISTRO_TARGETARCH='${TARGETARCH}'" >> ${WOOF_OUT}/DISTRO_SPECS
	fi
fi

#record the woof state we build from
if [ "`git log -n 1`" != "" ]; then
	GITBRANCH=$(git rev-parse --abbrev-ref HEAD)
	GITHEAD=$(git log -n 1 --pretty=format:"%h;%ci") # git rev-parse HEAD
	if [ -f ${WOOF_OUT}/DISTRO_SPECS ];then
		if [ "`grep '^BUILD_FROM_WOOF' ${WOOF_OUT}/DISTRO_SPECS`" = "" ];then
			echo "BUILD_FROM_WOOF='${GITBRANCH};${GITHEAD}'" >> ${WOOF_OUT}/DISTRO_SPECS
		fi
	fi
fi

#until i upgrade the woof scripts... (i was planning to rename Packages-puppy-* to Packages-pet-*, aborted)
for ONEPP in `find ${WOOF_OUT} -mindepth 1 -maxdepth 1 -name 'Packages-pet-*' | tr '\n' ' '`
do
	BASEPP="`basename $ONEPP`"
	NEWBASE="`echo -n $BASEPP | sed -e 's%Packages-pet-%Packages-puppy-%'`"
	ln -s $BASEPP ${WOOF_OUT}/${NEWBASE}
done

#111127 make sure host puppy has these...
[ ! -f /usr/sbin/printcols ] && cp -af woof-arch/${HOSTARCH}/build/support/printcols /usr/sbin/ #column manipulator.

#111127 make sure target has these...
cp -af woof-arch/${TARGETARCH}/build/support/printcols ${WOOF_OUT}/${NEWBASE}/rootfs-skeleton/usr/sbin/

rm -f ${WOOF_OUT}/c_apps

echo
echo "Directory '${WOOF_OUT}'
is now normal, that is, the workarounds have been removed. Note,
../local-repositories has been created (if not already), to be used as a common
binary package download place. 'packages-pet' and 'packages-${BINARIES}'
have been created that link into it, where pkgs will be downloaded to."

### END ###
