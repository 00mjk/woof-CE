The Next-Generation of Woof (Woof-NG aka Woof3) branch.
This is a new and experimental branch of Woof build system for 
Puppy Linux, aiming for a new simplified and possibly
more standard-compliant puppy building system.

Currently this branch will build a very basic Ubuntu or Debian Puppy
(with working apt-get). As time passes, the plans is to bring it to 
parity with the older build system (Woof2) and also to add more 
source distros other than Debian/Ubuntu (Slackware is in immediate 
pipeline).

Main reason for this branch? To bring the fun back in puppy-building :)

How to use:
-----
1. Clone this branch, put it in a largish directory *OUTSIDE* your
   save file (e.g. in some external partition like /mnt/sda3 that uses
   Unix partition - ext2/3/4 btrfs xfs etc will be good).
   
2. Build your kernel. "cd kernel-kit", read the README inside there, 
   edit build.conf as needed, and then execute ./build.sh.
   You MUST ENABLE Fatdog-style kernel or otherwise it won't boot.
   
   When done, you will get a dist/packages with vmlinuz and 
   kernel-modules.sfs (perhaps appended with version number).
   Keep this.
   
   You can get this step if you can get a pre-built kernel and kernel
   modules from somewhere, check the forum.
   
3. Run ./setup.sh. Answer a few questions, and you will get a "workdir".

4. cd workdir

5. ./build-sfs.sh --- this will build the puppy.sfs (basesfs) in 
   iso/iso-root.

6. Copy the vmlinuz and kernel-modules you've got from step 2 to 
   iso/iso-root, rename them to "vmlinuz" and "kernel-modules.sfs", no
   version numbering.
   
7. ./build-iso.sh --- this will make an ISO using Fatdog64 kernel 
   (this will change to use kernel-kit later), the iso is located in
   iso/puppy.iso
   
8. If you have qemu, you can then ./runqemu.sh to boot that puppy.iso.

9. Ready for more? Run WORK_DIR=work2 ./setup.sh from the top directory,
   and choose another build parameters. "cd work2", and re-do step 4-8 
   above to create another puppy build
   .
   You can keep multiple builds in its own separate directory this way.

What has been tested:
- 32-bit ubuntu trusty build.
- previous version of this branch (called deb-build) has tested 
  building with 32-bit debian sid, 64-bit ubuntu trusty,
  32 and 64-bit ubuntu utopic.

Have fun.

